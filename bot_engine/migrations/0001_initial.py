# Generated by Django 3.0.5 on 2020-04-30 08:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import sortedm2m.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Button',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('text', models.CharField(help_text='Button text displayed.', max_length=256, verbose_name='text')),
                ('message', models.TextField(blank=True, help_text='The text of the message sent during the processing of a button click. If empty, nothing is sent.', null=True, verbose_name='message')),
                ('comment', models.TextField(blank=True, help_text='Comment text. Does not affect functionality.', null=True, verbose_name='comment')),
                ('handler', models.CharField(blank=True, default='', help_text='Your handler implementation must implement the bot_engine.bot_handlers.button_echo interface.', max_length=256, verbose_name='handler')),
                ('for_staff', models.BooleanField(blank=True, default=False, help_text='Buttons with this flag are available only for user accounts of site staff (django.contrib.auth).', verbose_name='for staff users')),
                ('for_admin', models.BooleanField(blank=True, default=False, help_text='Buttons with this flag are available only for user accounts of site admins (django.contrib.auth).', verbose_name='for admin users')),
                ('command', models.CharField(default=None, editable=False, max_length=256, null=True, verbose_name='command')),
                ('is_inline', models.BooleanField(default=False, help_text='Inline in message.', verbose_name='inline')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
            ],
            options={
                'verbose_name': 'button',
                'verbose_name_plural': 'buttons',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='title')),
                ('message', models.TextField(blank=True, help_text='The text of the message sent when you get to this menu. If empty, nothing is sent.', null=True, verbose_name='message')),
                ('comment', models.TextField(blank=True, help_text='Comment text. Does not affect functionality.', null=True, verbose_name='comment')),
                ('handler', models.CharField(blank=True, default='', help_text='Your handler implementation must implement the bot_engine.bot_handlers.simple_echo interface.', max_length=256, verbose_name='handler')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('buttons', sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, related_name='menus', sort_value_field_name='order', to='bot_engine.Button', verbose_name='buttons')),
            ],
            options={
                'verbose_name': 'menu',
                'verbose_name_plural': 'menus',
                'unique_together': {('title',)},
            },
        ),
        migrations.CreateModel(
            name='Messenger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='This name will be used as the sender name.', max_length=256, verbose_name='title')),
                ('api_type', models.CharField(choices=[('none', 'None'), ('telegram', 'Telegram'), ('viber', 'Viber')], default='none', max_length=256, verbose_name='API type')),
                ('token', models.CharField(blank=True, default='', help_text='Token or secret key.', max_length=256, verbose_name='bot token')),
                ('proxy', models.CharField(blank=True, default='', help_text='Enter proxy uri with format "schema://user:password@proxy_address:port"', max_length=256, verbose_name='proxy')),
                ('logo', models.CharField(blank=True, default='', help_text='Relative URL. Required for some messenger APIs: Viber.', max_length=256, verbose_name='logo')),
                ('welcome_text', models.TextField(blank=True, default='', help_text='Welcome message. Will be sent in response to the opening of the dialog (not a subscribe event). May be used with some messaging programs: Viber.', verbose_name='welcome text')),
                ('handler', models.CharField(blank=True, default='bot_engine.bot_handlers.simple_echo', help_text='It processes all messages that do not fall into the menu and button handlers. To implement a handler, implement a bot_engine.bot_handlers.simple_echo interface.', max_length=256, verbose_name='main handler')),
                ('hash', models.CharField(default='', editable=False, max_length=256, verbose_name='token hash')),
                ('is_active', models.BooleanField(default=False, editable=False, help_text='This flag changes when the webhook on the messenger API server is activated/deactivated.', verbose_name='active')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('menu', models.ForeignKey(blank=True, help_text='The root menu. For example, "Home".', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messengers', to='bot_engine.Menu', verbose_name='main menu')),
            ],
            options={
                'verbose_name': 'messenger',
                'verbose_name_plural': 'messengers',
                'unique_together': {('token', 'api_type')},
            },
        ),
        migrations.AddField(
            model_name='button',
            name='next_menu',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_buttons', to='bot_engine.Menu', verbose_name='next menu'),
        ),
        migrations.AlterUniqueTogether(
            name='button',
            unique_together={('command',)},
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.CharField(editable=False, max_length=256, primary_key=True, serialize=False, verbose_name='account id')),
                ('username', models.CharField(blank=True, max_length=256, null=True, verbose_name='user name')),
                ('utm_source', models.CharField(blank=True, max_length=256, null=True, verbose_name='utm source')),
                ('info', models.JSONField(blank=True, default=dict, verbose_name='information')),
                ('context', models.JSONField(blank=True, default=dict, verbose_name='context')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone')),
                ('is_active', models.BooleanField(default=False, editable=False, help_text='This flag changes when the user account on the messenger API server is subscribed/unsubscribed.', verbose_name='active')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='last visit')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='first visit')),
                ('menu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='bot_engine.Menu', verbose_name='current menu')),
                ('messenger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to='bot_engine.Messenger', verbose_name='messenger')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'account',
                'verbose_name_plural': 'accounts',
                'unique_together': {('id', 'messenger')},
            },
        ),
    ]
